Part 1

    Class Based Views
      - Django provides a base class: View;
      - A subclass of View that provides a method such as get() can used as a Django View;
      - Request data is provided in the request parameter, *arg and **kwarg contain parameters configured in the url;
      - The handler method should return a HttpResponse.

    Our First View
      * View;
      * HttpResponse.

       Example:
          class SimpleHelloWord(View):
              """
                  View that returns Hello World
              """

              def get (self, request, *args, **kwargs):
                  return HttpResponse('<h1>Hello world</h1>')

    Urls
      * Making our first View accessible

        bookmark/urls.py
        urlpatterns = [
                  path('locations/',
                  include('locations.urls')),
                ]

        locations/urls.py
        urlpatterns = [
                  path(
                       'hello1/',
                       SimpleHelloWord.as_view(),
                       name = 'hello-view1'
                      ),
                ]

    Accessing Our First View:

        http://127.0.0.1:8000/locations/hello1/

        And we see  in our browser "Hello world"

Part 2

    Url Query Parameters
      - Urls provide mechanism to receive parameters via the query portion;
      - Example:
        www.mysite.com/view_location/?val1=1&val2=5 has two parameters val1 and val2 with values 1 and 5/

    Our Second View
      * Querystring parameter
        Example:
          Add to locations/views.py

            class SimpleHelloPerson(View):
              """
                 View that returns Hello $person parameter
              """

              def get (self, request, *args, **kwargs):
                  return HttpResponse('<h1>Hello {}</h1>'.format(request.GET['name']))

          Add to locations/urls.py

            path('hello2/', SimpleHelloPerson.as_view(), name='hello-view2'),

        Accessing Our Second  View:

          http://127.0.0.1:8000/locations/hello2/?name=John

          And we see  in our browser "Hello John"

            or

          http://127.0.0.1:8000/locations/hello2/?name=Alice

          And we see  in our browser "Hello Alice"

    Url kwarg Parameters
     - Django provides an alternative mechanism for parameters from urls taken from the path;
     - Components of the path can form parameters;
     - Example:
        www.mysite.com/my_view/5/7/fred/ with url configuration path:
           path('/my_view/<int:val1>/<int:val2>/<str:name>', views.year_archive);
     - Provides three kwarg parameters val1, val2, name with values 5, 7, "fred".

     Our Third View
       * kwarg parameter
         class SimpleHelloPersonVersion2(View):
             """
               View that return Hello $person parameter
             """
             def get(self, request, *args, **kwargs):
                 return HttpResponse('<h1>Hello {}</h1>'.format(kwargs['name']))

       Accessing Our Third  View:

         http://127.0.0.1:8000/locations/hello3/Fred/

          And we see  in our browser "Hello Fred"

            or

          http://127.0.0.1:8000/locations/hello3/Alice/

          And we see  in our browser "Hello Alice"


     Url kwarg Parameters
       * Most Django developers prefer Url kwarg parameters:
         - Cleaner urls, easier bookmarking, greater control through url configuration;
         - Optional parameters can be accepted through additional url path() configs;
         - Can de used for both get and post requests;
       * Querystring:
         - Useful for more complicated optional parameter scenarios to avoid complicated url configuration.